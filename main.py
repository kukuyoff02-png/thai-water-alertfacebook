import requests
import os
from datetime import datetime
import pandas as pd
import pytz
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import random
import re
import time

# --- URL ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏ ---
# ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ ‡∏≠.‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ (‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà)
INBURI_WATER_URL = "https://singburi.thaiwater.net/wl"
# ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤ (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
DISCHARGE_URL = "https://www.thaiwater.net/water/dam/large"

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞ Token ---
LINE_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")
LINE_API_URL = "https://api.line.me/v2/bot/message/broadcast"
HISTORICAL_EXCEL_PATH = "data/dam_discharge_history.xlsx"

def get_inburi_bridge_level():
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ (‡∏à‡∏≤‡∏Å singburi.thaiwater.net/wl)
    ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Selenium ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢ JavaScript
    """
    driver = None
    try:
        options = webdriver.ChromeOptions()
        options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--window-size=1920,1080")

        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ChromeDriver...")
        driver = webdriver.Chrome(service=ChromeService(), options=options)
        driver.set_page_load_timeout(180)
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á URL: {INBURI_WATER_URL}")
        driver.get(INBURI_WATER_URL)
        print("‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á URL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")

        # === ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ" ‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ===
        wait = WebDriverWait(driver, 60)
        
        # ‡πÉ‡∏ä‡πâ XPath ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß (tr) ‡∏ó‡∏µ‡πà‡∏°‡∏µ header (th) ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ"
        inburi_row_xpath = "//th[contains(text(), '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ')]/ancestor::tr"
        inburi_row = wait.until(EC.presence_of_element_located((By.XPATH, inburi_row_xpath)))
        print("‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ' ‡πÅ‡∏•‡πâ‡∏ß")

        # ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡πÉ‡∏´‡∏°‡πà:
        # <td> ‡πÅ‡∏£‡∏Å (index 0) ‡∏Ñ‡∏∑‡∏≠ ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á
        # <td> ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (index 1) ‡∏Ñ‡∏∑‡∏≠ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        cells = inburi_row.find_elements(By.TAG_NAME, "td")
        
        if len(cells) > 1:
            level_str = cells[1].text.strip()
            print(f"‡∏û‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ: {level_str}")
            return float(level_str)
        else:
            print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ")
            return None

    except Exception as e:
        print(f"‚ùå ERROR: get_inburi_bridge_level: {e}")
        return None
    finally:
        if driver:
            print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î ChromeDriver...")
            driver.quit()

def fetch_chao_phraya_dam_discharge():
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤
    ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ BeautifulSoup
    """
    try:
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36",
                   "Accept-Language": "en-US,en;q=0.9,th;q=0.8",
                   "Cache-Control": "no-cache",
                   "Pragma": "no-cache"}
        res = requests.get(DISCHARGE_URL, headers=headers, timeout=30)
        res.raise_for_status()
        soup = BeautifulSoup(res.content, 'html.parser')

        tables = soup.find_all('table', class_='table-bordered')
        for table in tables:
            rows = table.find_all('tr')
            for row in rows:
                cells = row.find_all('td')
                if len(cells) > 1 and "‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤" in cells[1].text:
                    if len(cells) > 6:
                        discharge_text = cells[6].text.strip().replace(',', '')
                        return float(discharge_text)
        return None
    except Exception as e:
        print(f"‚ùå ERROR: fetch_chao_phraya_dam_discharge: {e}")
        return None


def get_history_discharge():
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ dict {‡∏õ‡∏µ: ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥} ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏Å‡∏±‡∏ö 2554
    """
    try:
        now = datetime.now(pytz.timezone("Asia/Bangkok"))
        current_year_th = now.year + 543
        day = now.day
        month_en = now.strftime("%B")
        month_map = {
            "January": "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "February": "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "March": "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
            "April": "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "May": "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "June": "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
            "July": "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "August": "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "September": "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
            "October": "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "November": "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "December": "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
        }
        month_th = month_map[month_en]

        df = pd.read_excel(HISTORICAL_EXCEL_PATH)

        years_check = [current_year_th - 1, 2554]
        result = {}
        for year_th in years_check:
            match = df[
                (df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] == day) &
                (df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] == month_th) &
                (df["‡∏õ‡∏µ"] == year_th)
            ]
            if not match.empty:
                result[year_th] = match["‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥ (‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥)"].values[0]

        return result
    except Exception as e:
        print(f"‚ùå ERROR: get_history_discharge: {e}")
        return {}

def analyze_and_create_message(inburi_level, dam_discharge):
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    """
    if inburi_level is None or dam_discharge is None:
        return "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Log"

    bank_height = 13.0 
    history = get_history_discharge()
    prev_discharge_text = ""
    if history:
        prev_discharge_text += "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô:\n"
        if history.get(max(history.keys())):
             prev_discharge_text += f"‚Ä¢ ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß: {history[max(history.keys())]:,.0f} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n"
        if history.get(2554):
             prev_discharge_text += f"‚Ä¢ ‡∏õ‡∏µ 2554: {history[2554]:,.0f} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n"

    distance_to_bank = bank_height - inburi_level
    if dam_discharge > 2400 or distance_to_bank < 1.0:
        status_emoji = "üü•"
        status_title = "‚ÄºÔ∏è ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‚ÄºÔ∏è"
        recommendation = "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n1. ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á\n2. ‡∏Ñ‡∏ß‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á\n3. ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏à‡∏£‡∏£‡∏¥‡∏°‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥"
    elif dam_discharge > 1800 or distance_to_bank < 2.0:
        status_emoji = "üü®"
        status_title = "‚ÄºÔ∏è ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á ‚ÄºÔ∏è"
        watch_recommendations = [
            "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n1. ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡∏£‡∏¥‡∏°‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏ô‡∏≠‡∏Å‡∏Ñ‡∏±‡∏ô‡∏Å‡∏±‡πâ‡∏ô‡∏ô‡πâ‡∏≥ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á\n2. ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î",
            "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n1. ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô‡∏ô‡πâ‡∏≥‡πÑ‡∏î‡πâ\n2. ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£",
            "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n1. ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ä‡∏∏‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ü‡∏â‡∏≤‡∏¢ ‡∏¢‡∏≤ ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏´‡πâ‡∏á\n2. ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≤‡∏¢",
            "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n1. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏î‡πá‡∏Å ‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô\n2. ‡∏á‡∏î‡∏ß‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥"
        ]
        recommendation = random.choice(watch_recommendations)
    else:
        status_emoji = "üü©"
        status_title = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥"
        recommendation = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö"

    now = datetime.now(pytz.timezone("Asia/Bangkok"))
    message = f"""{status_emoji} {status_title}
‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤ ‡∏≠.‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ
‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {now.strftime("%d/%m/%Y %H:%M")} ‡∏ô.

‚Ä¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ (‡∏™‡∏∞‡∏û‡∏≤‡∏ô‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ): {inburi_level:.2f} ‡∏°.‡∏£‡∏ó‡∏Å.
  (‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {distance_to_bank:.2f} ‡∏°.)
‚Ä¢ ‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤ (‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô): {dam_discharge:,.0f} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

{prev_discharge_text}
-----------------------------------
{recommendation}"""
    return message

def send_line_broadcast(message):
    """
    ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE Broadcast
    """
    if not LINE_TOKEN:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE_CHANNEL_ACCESS_TOKEN!")
        return
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_TOKEN}"
    }
    payload = {
        "messages": [{"type": "text", "text": message}]
    }
    try:
        res = requests.post(LINE_API_URL, headers=headers, json=payload, timeout=10)
        res.raise_for_status()
        print("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Broadcast ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‚ùå ERROR: LINE Broadcast: {e}")

if __name__ == "__main__":
    print("=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡πâ‡∏≥‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á) ===")

    inburi_level = get_inburi_bridge_level()
    dam_discharge = fetch_chao_phraya_dam_discharge()

    if dam_discharge is None:
        dam_discharge = 0 

    final_message = analyze_and_create_message(inburi_level, dam_discharge)

    print("\nüì§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:")
    print(final_message)
    print("\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE...")
    send_line_broadcast(final_message)
    print("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
