import os
import re
import json
import time
import requests
import pytz
import pandas as pd
from datetime import datetime
from bs4 import BeautifulSoup

# --- р╕Др╣Ир╕▓р╕Др╕Зр╕Чр╕╡р╣И (р╣Бр╕Бр╣Йр╣Др╕В Path р╕Бр╕ер╕▒р╕Ър╕бр╕▓р╣Гр╕лр╣Йр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З) ---
SINGBURI_URL = "https://singburi.thaiwater.net/wl"
DISCHARGE_URL = 'https://tiwrm.hii.or.th/DATA/REPORT/php/chart/chaopraya/small/chaopraya.php'
HISTORICAL_DATA_FILE = 'data/dam_discharge_history_complete.csv'
LINE_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_API_URL = "https://api.line.me/v2/bot/message/broadcast"

# Dictionary to map Thai month names to month numbers
THAI_MONTH_MAP = {
    'р╕бр╕Бр╕гр╕▓р╕Др╕б': 1, 'р╕Бр╕╕р╕бр╕ар╕▓р╕Юр╕▒р╕Щр╕Шр╣М': 2, 'р╕бр╕╡р╕Щр╕▓р╕Др╕б': 3, 'р╣Ар╕бр╕йр╕▓р╕вр╕Щ': 4, 'р╕Юр╕др╕йр╕ар╕▓р╕Др╕б': 5, 'р╕бр╕┤р╕Цр╕╕р╕Щр╕▓р╕вр╕Щ': 6,
    'р╕Бр╕гр╕Бр╕Ор╕▓р╕Др╕б': 7, 'р╕кр╕┤р╕Зр╕лр╕▓р╕Др╕б': 8, 'р╕Бр╕▒р╕Щр╕вр╕▓р╕вр╕Щ': 9, 'р╕Хр╕╕р╕ер╕▓р╕Др╕б': 10, 'р╕Юр╕др╕ир╕Ир╕┤р╕Бр╕▓р╕вр╕Щ': 11, 'р╕Шр╕▒р╕Щр╕зр╕▓р╕Др╕б': 12
}

# --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡ ---
def get_inburi_data(url: str, timeout: int = 20):
    """
    р╕Фр╕╢р╕Зр╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│р╣Бр╕ер╕░р╕гр╕░р╕Фр╕▒р╕Ър╕Хр╕ер╕┤р╣Ир╕Зр╕Ир╕▓р╕Бр╕лр╕Щр╣Йр╕▓р╣Ар╕зр╣Зр╕Ър╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡
    р╕Др╕╖р╕Щр╕Др╣Ир╕▓ (level, bank) р╕лр╕гр╕╖р╕н (None, None) р╕Бр╕гр╕Ур╕╡р╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И
    """
    try:
        print(f"Fetching data from {url}")
        res = requests.get(url, timeout=timeout)
        res.raise_for_status()
        soup = BeautifulSoup(res.text, 'html.parser')

        # р╕Др╣Йр╕Щр╕лр╕▓р╣Бр╕Цр╕зр╕Чр╕╡р╣Ир╕бр╕╡р╕кр╕Цр╕▓р╕Щр╕╡ "р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡"
        row = None
        # р╕Цр╣Йр╕▓ bs4 >=4.7 р╣Гр╕Кр╣Й :has() р╕Бр╕▒р╕Ъ :contains()
        try:
            row = soup.select_one("tbody#station-list tr:has(th:contains('р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡'))")
        except Exception:
            # fallback р╕кр╕│р╕лр╕гр╕▒р╕Ъ bs4 р╕гр╕╕р╣Ир╕Щр╕Бр╣Ир╕нр╕Щ
            for r in soup.select("tbody#station-list tr"):
                th = r.find("th")
                if th and "р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡" in th.get_text():
                    row = r
                    break

        if not row:
            print("тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕кр╕Цр╕▓р╕Щр╕╡р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡р╣Гр╕Щр╕лр╕Щр╣Йр╕▓р╣Ар╕зр╣Зр╕Ъ")
            return None, None

        tds = row.find_all("td")
        level = tds[1].get_text(strip=True)
        bank  = tds[2].get_text(strip=True)
        print(f"тЬЕ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│: {level} р╕б., р╕Хр╕ер╕┤р╣Ир╕З: {bank} р╕б.")
        return level, bank

    except Exception as e:
        print(f"тЭМ ERROR р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡: {e}")
        return None, None

# --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Ыр╕ер╣Ир╕нр╕вр╕Щр╣Йр╕│р╣Ар╕Вр╕╖р╣Ир╕нр╕Щр╣Ар╕Ир╣Йр╕▓р╕Юр╕гр╕░р╕вр╕▓ ---
def fetch_chao_phraya_dam_discharge(url: str):
    try:
        headers = {'Cache-Control': 'no-cache', 'Pragma': 'no-cache'}
        res = requests.get(url, headers=headers, timeout=20)
        res.raise_for_status()

        matches = re.findall(r"parseFloat\('([0-9.]+)'\)", res.text)
        if matches:
            discharge = matches[-1]
            print(f"тЬЕ р╕Ыр╕гр╕┤р╕бр╕▓р╕Ур╕Щр╣Йр╕│р╣Др╕лр╕ер╕Ьр╣Ир╕▓р╕Щр╣Ар╕Вр╕╖р╣Ир╕нр╕Щр╣Ар╕Ир╣Йр╕▓р╕Юр╕гр╕░р╕вр╕▓: {discharge}")
            return discharge
        else:
            print("тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Ыр╕ер╣Ир╕нр╕вр╕Щр╣Йр╕│р╣Гр╕Щ Script р╕Ир╕▓р╕Бр╣Ар╕зр╣Зр╕Ъ")
            return None
    except Exception as e:
        print(f"тЭМ ERROR: р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Вр╕╖р╣Ир╕нр╕Щ: {e}")
        return None

# --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕З ---
def load_historical_data(file_path: str):
    try:
        df = pd.read_csv(file_path)
        df['р╣Ар╕Фр╕╖р╕нр╕Щ'] = df['р╣Ар╕Фр╕╖р╕нр╕Щ'].str.strip().map(THAI_MONTH_MAP)
        df['р╕Ыр╕╡'] = df['р╕Ыр╕╡'] - 543
        df['date'] = pd.to_datetime(
            df[['р╕Ыр╕╡', 'р╣Ар╕Фр╕╖р╕нр╕Щ', 'р╕зр╕▒р╕Щр╕Чр╕╡р╣И']].rename(
                columns={'р╕Ыр╕╡': 'year', 'р╣Ар╕Фр╕╖р╕нр╕Щ': 'month', 'р╕зр╕▒р╕Щр╕Чр╕╡р╣И': 'day'}
            )
        )
        return df
    except FileNotFoundError:
        print(f"тЭМ ERROR: р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕Зр╕Чр╕╡р╣И: {file_path}")
        return None
    except Exception as e:
        print(f"тЭМ ERROR: р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕З: {e}")
        return None

# --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Др╣Йр╕Щр╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕Зр╕зр╕▒р╕Щр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щ ---
def find_historical_discharge(df, target_date):
    if df is None:
        return "р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е"
    try:
        match = df[df['date'].dt.strftime('%m-%d') == target_date.strftime('%m-%d')]
        return match['р╕Ыр╕гр╕┤р╕бр╕▓р╕Ур╕Щр╣Йр╕│ (р╕ер╕Ъ.р╕б./р╕зр╕┤р╕Щр╕▓р╕Чр╕╡)'].iloc[-1] if not match.empty else "р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е"
    except Exception:
        return "р╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕бр╣Ир╣Др╕Фр╣Й"

# --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕ер╕░р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б ---
def analyze_and_create_message(current_level, current_discharge, bank_level, hist_2024, hist_2011):
    today_th = datetime.now(pytz.timezone('Asia/Bangkok')).strftime('%d %B %Y %H:%M')
    status = "тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│р╣Др╕Фр╣Й"
    remaining_str = "N/A"
    try:
        level_f = float(current_level)
        bank_f  = float(bank_level)
        rem = bank_f - level_f
        remaining_str = f"{rem:.2f}"
        if level_f >= bank_f:
            status = "ЁЯЪи р╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│р╕Цр╕╢р╕Зр╕Хр╕ер╕┤р╣Ир╕Зр╣Бр╕ер╣Йр╕з! ЁЯЪи"
        elif rem <= 1.0:
            status = "тЭЧтЭЧ р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│р╣Гр╕Бр╕ер╣Йр╕Цр╕╢р╕Зр╕Хр╕ер╕┤р╣Ир╕З тЭЧтЭЧ"
        elif rem <= 2.0:
            status = "тЪая╕П р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│"
        else:
            status = "ЁЯТз р╕кр╕Цр╕▓р╕Щр╕Бр╕▓р╕гр╕Ур╣Мр╕Щр╣Йр╕│р╕Ыр╕Бр╕Хр╕┤"
    except (ValueError, TypeError):
        pass

    message = (
        f"ЁЯУв р╕кр╕гр╕╕р╕Ыр╕кр╕Цр╕▓р╕Щр╕Бр╕▓р╕гр╕Ур╣Мр╕Щр╣Йр╕│ {today_th} (GMT+7)\n"
        f"=========================\n"
        f"ЁЯМК **р╕кр╕Цр╕▓р╕Щр╕╡ C.2 р╕н.р╣Ар╕бр╕╖р╕нр╕Зр╕кр╕┤р╕Зр╕лр╣Мр╕Ър╕╕р╕гр╕╡**\n"
        f"   - р╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│: **{current_level} р╕б.** (р╕гр╕Чр╕Б.)\n"
        f"   - р╕гр╕░р╕Фр╕▒р╕Ър╕Хр╕ер╕┤р╣Ир╕З: **{bank_level} р╕б.** (р╕гр╕Чр╕Б.)\n"
        f"   - р╕Хр╣Ир╕│р╕Бр╕зр╣Ир╕▓р╕Хр╕ер╕┤р╣Ир╕З: **{remaining_str} р╕б.**\n"
        f"   - р╕кр╕Цр╕▓р╕Щр╕░: {status}\n"
        f"=========================\n"
        f"ыМР **р╣Ар╕Вр╕╖р╣Ир╕нр╕Щр╣Ар╕Ир╣Йр╕▓р╕Юр╕гр╕░р╕вр╕▓ (C.13)**\n"
        f"   - р╕Ыр╕гр╕┤р╕бр╕▓р╕Ур╕Щр╣Йр╕│р╣Др╕лр╕ер╕Ьр╣Ир╕▓р╕Щ (р╕ер╣Ир╕▓р╕кр╕╕р╕Ф):\n"
        f"     **{current_discharge} р╕ер╕Ъ.р╕б./р╕зр╕┤р╕Щр╕▓р╕Чр╕╡**\n\n"
        f"   - **р╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕З (р╕зр╕▒р╕Щр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щ):**\n"
        f"     - р╕Ыр╕╡ 2567 (2024): **{hist_2024}** р╕ер╕Ъ.р╕б./р╕зр╕┤р╕Щр╕▓р╕Чр╕╡\n"
        f"     - р╕Ыр╕╡ 2554 (2011): **{hist_2011}** р╕ер╕Ъ.р╕б./р╕зр╕┤р╕Щр╕▓р╕Чр╕╡\n"
        f"=========================\n"
        f"#р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Щр╣Йр╕│р╕кр╕┤р╕Зр╕лр╣Мр╕Ър╕╕р╕гр╕╡ #р╣Ар╕Вр╕╖р╣Ир╕нр╕Щр╣Ар╕Ир╣Йр╕▓р╕Юр╕гр╕░р╕вр╕▓"
    )
    return message.strip()

# --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╣Ир╕З LINE Broadcast ---
def send_line_broadcast(message):
    if not LINE_TOKEN:
        print("тЭМ ERROR: р╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ LINE_CHANNEL_ACCESS_TOKEN")
        return
    headers = {"Authorization": f"Bearer {LINE_TOKEN}"}
    payload = {"messages": [{"type": "text", "text": message}]}
    try:
        res = requests.post(LINE_API_URL, headers=headers, json=payload, timeout=10)
        res.raise_for_status()
        print("тЬЕ р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б Broadcast р╕кр╕│р╣Ар╕гр╣Зр╕И!")
    except Exception as e:
        print(f"тЭМ ERROR: LINE Broadcast: {e} | Response: {res.text if 'res' in locals() else 'N/A'}")

# --- Main ---
if __name__ == "__main__":
    print("=== р╣Ар╕гр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕гр╕░р╕Ър╕Ър╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Щр╣Йр╕│р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡ ===")
    inburi_level, bank_level = get_inburi_data(SINGBURI_URL)
    dam_discharge = fetch_chao_phraya_dam_discharge(DISCHARGE_URL)
    historical_df = load_historical_data(HISTORICAL_DATA_FILE)

    today = datetime.now(pytz.timezone('Asia/Bangkok'))
    target_date_2024 = today.replace(year=2024)
    target_date_2011 = today.replace(year=2011)

    hist_2567 = find_historical_discharge(historical_df, target_date_2024)
    hist_2554 = find_historical_discharge(historical_df, target_date_2011)

    if inburi_level and bank_level and dam_discharge:
        final_message = analyze_and_create_message(
            inburi_level, dam_discharge, bank_level, hist_2567, hist_2554
        )
        print("\n--- р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Ир╕░р╕кр╣Ир╕З ---\n" + final_message + "\n--------------------\n")
        send_line_broadcast(final_message)
    else:
        print("тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ър╕▓р╕Зр╕кр╣Ир╕зр╕Щ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╣Ир╕Зр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Др╕Фр╣Й")
