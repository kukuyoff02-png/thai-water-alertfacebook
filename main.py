import os
import re
import json
import time
import requests
import pytz
import pandas as pd
from datetime import datetime
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# --- р╕Др╣Ир╕▓р╕Др╕Зр╕Чр╕╡р╣И (р╣Бр╕Бр╣Йр╣Др╕В Path р╣Гр╕лр╣Йр╕вр╕╖р╕Фр╕лр╕вр╕╕р╣Ир╕Щр╕Вр╕╢р╣Йр╕Щ) ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SINGBURI_URL = "https://singburi.thaiwater.net/wl"
DISCHARGE_URL = 'https://tiwrm.hii.or.th/DATA/REPORT/php/chart/chaopraya/small/chaopraya.php'
HISTORICAL_DATA_FILE = os.path.join(BASE_DIR, 'data', 'dam_discharge_history_complete.csv')
LINE_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_API_URL = "https://api.line.me/v2/bot/message/broadcast"

# р╣Бр╕Ьр╕Щр╕Чр╕╡р╣Ир╕Кр╕╖р╣Ир╕нр╣Ар╕Фр╕╖р╕нр╕Щр╣Др╕Чр╕в тЖТ р╣Ар╕Фр╕╖р╕нр╕Щр╕Хр╕▒р╕зр╣Ар╕ер╕В
THAI_MONTH_MAP = {
    'р╕бр╕Бр╕гр╕▓р╕Др╕б': 1, 'р╕Бр╕╕р╕бр╕ар╕▓р╕Юр╕▒р╕Щр╕Шр╣М': 2, 'р╕бр╕╡р╕Щр╕▓р╕Др╕б': 3, 'р╣Ар╕бр╕йр╕▓р╕вр╕Щ': 4,
    'р╕Юр╕др╕йр╕ар╕▓р╕Др╕б': 5, 'р╕бр╕┤р╕Цр╕╕р╕Щр╕▓р╕вр╕Щ': 6, 'р╕Бр╕гр╕Бр╕Ор╕▓р╕Др╕б': 7, 'р╕кр╕┤р╕Зр╕лр╕▓р╕Др╕б': 8,
    'р╕Бр╕▒р╕Щр╕вр╕▓р╕вр╕Щ': 9, 'р╕Хр╕╕р╕ер╕▓р╕Др╕б': 10, 'р╕Юр╕др╕ир╕Ир╕┤р╕Бр╕▓р╕вр╕Щ': 11, 'р╕Шр╕▒р╕Щр╕зр╕▓р╕Др╕б': 12
}

# --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡ ---
def get_inburi_data(url: str, timeout: int = 90, retries: int = 3):
    opts = Options()
    opts.add_argument("--headless")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    opts.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/91.0")
    opts.add_argument("--disable-blink-features=AutomationControlled")

    driver = None
    for attempt in range(retries):
        try:
            driver = webdriver.Chrome(options=opts)
            driver.get(url)
            wait = WebDriverWait(driver, timeout)
            # р╕Ыр╕гр╕▒р╕Ъ XPath р╣Гр╕лр╣Йр╕Ир╕▒р╕Ъ C.2 (р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡) р╣Др╕Фр╣Йр╕Хр╕гр╕З
            station_row = wait.until(
                EC.presence_of_element_located(
                    (By.XPATH, "//tbody[@id='station-list']//th[contains(text(), 'р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡')]/parent::tr")
                )
            )
            level = station_row.find_element(By.XPATH, ".//td[2]/span").text.strip()
            bank  = station_row.find_element(By.XPATH, ".//td[3]/span").text.strip()
            if level and bank and level != "N/A" and bank != "N/A":
                return level, bank
        except Exception as e:
            print(f"[get_inburi_data] Attempt {attempt+1} failed: {e}")
        finally:
            if driver:
                driver.quit()
        time.sleep(5)
    print("тЭМ р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡р╕ер╣Йр╕бр╣Ар╕лр╕ер╕зр╕лр╕ер╕▒р╕Зр╕ер╕нр╕Зр╕лр╕ер╕▓р╕вр╕Др╕гр╕▒р╣Йр╕З")
    return None, None

# --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Ыр╕ер╣Ир╕нр╕вр╕Щр╣Йр╕│р╣Ар╕Вр╕╖р╣Ир╕нр╕Щр╣Ар╕Ир╣Йр╕▓р╕Юр╕гр╕░р╕вр╕▓ ---
def fetch_chao_phraya_dam_discharge(url: str):
    try:
        res = requests.get(url, timeout=20)
        res.raise_for_status()
        # р╕лр╕▓р╣Ар╕ер╕Вр╕Чр╕╕р╕Бр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ р╣Бр╕ер╕░р╣Ар╕ер╕╖р╕нр╕Бр╕Хр╕▒р╕зр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в
        nums = re.findall(r"([-+]?\d*\.\d+|\d+)", res.text)
        if nums:
            return nums[-1]
    except Exception as e:
        print(f"[fetch_chao_phraya_dam_discharge] Error: {e}")
    return None

# --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Вр╕лр╕ер╕Фр╣Бр╕ер╕░р╕Фр╕╡р╕Ър╕▒р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕З ---
def load_historical_data(path):
    try:
        print(f"ЁЯФН Loading historical data from: {path}")
        df = pd.read_csv(path)
        print("DEBUG: columns =", df.columns.tolist())
        print("DEBUG: head =\n", df.head(5))
        df['р╣Ар╕Фр╕╖р╕нр╕Щ'] = df['р╣Ар╕Фр╕╖р╕нр╕Щ'].str.strip().map(THAI_MONTH_MAP)
        df['р╕Ыр╕╡']   = df['р╕Ыр╕╡'] - 543
        df['date'] = pd.to_datetime(
            df[['р╕Ыр╕╡','р╣Ар╕Фр╕╖р╕нр╕Щ','р╕зр╕▒р╕Щр╕Чр╕╡р╣И']].rename(
                columns={'р╕Ыр╕╡':'year','р╣Ар╕Фр╕╖р╕нр╕Щ':'month','р╕зр╕▒р╕Щр╕Чр╕╡р╣И':'day'}
            )
        )
        print("DEBUG: parsed dates =\n", df['date'].head(5))
        return df
    except Exception as e:
        print(f"тЭМ [load_historical_data] Error: {e}")
        return None

# --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Др╣Йр╕Щр╕лр╕▓р╕Ыр╕гр╕┤р╕бр╕▓р╕Ур╕Щр╣Йр╕│р╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕Зр╕Хр╕▓р╕бр╕Ыр╕╡р╕Хр╕гр╕З ---
def find_historical_discharge(df, target_date):
    if df is None:
        return "р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е"
    # р╕Фр╕╡р╕Ър╕▒р╕Бр╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓
    print(f"ЁЯФО Looking for exact date: {target_date.strftime('%Y-%m-%d')}")
    exact = df[df['date'] == target_date]
    if not exact.empty:
        print("DEBUG: Found exact match:\n", exact[['date','р╕Ыр╕гр╕┤р╕бр╕▓р╕Ур╕Щр╣Йр╕│ (р╕ер╕Ъ.р╕б./р╕зр╕┤р╕Щр╕▓р╕Чр╕╡)']])
        return str(exact['р╕Ыр╕гр╕┤р╕бр╕▓р╕Ур╕Щр╣Йр╕│ (р╕ер╕Ъ.р╕б./р╕зр╕┤р╕Щр╕▓р╕Чр╕╡)'].iloc[0])
    # fallback: match by month-day
    mmdd = target_date.strftime('%m-%d')
    subset = df[df['date'].dt.strftime('%m-%d') == mmdd]
    print(f"DEBUG: Fallback month-day filter {mmdd} тЖТ {len(subset)} rows")
    if not subset.empty:
        return str(subset['р╕Ыр╕гр╕┤р╕бр╕▓р╕Ур╕Щр╣Йр╕│ (р╕ер╕Ъ.р╕б./р╕зр╕┤р╕Щр╕▓р╕Чр╕╡)'].iloc[0])
    return "р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е"

# --- р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕кр╕гр╕╕р╕Ы ---
def analyze_and_create_message(current_level, discharge, bank_level, hist_2024, hist_2011):
    now = datetime.now(pytz.timezone('Asia/Bangkok')).strftime('%d %B %Y %H:%M')
    status = "ЁЯТз р╕кр╕Цр╕▓р╕Щр╕Бр╕▓р╕гр╕Ур╣Мр╕Щр╣Йр╕│р╕Ыр╕Бр╕Хр╕┤"
    try:
        lf = float(current_level)
        bf = float(bank_level)
        diff = bf - lf
        if lf >= bf:        status = "ЁЯЪи р╕Цр╕╢р╕Зр╕Хр╕ер╕┤р╣Ир╕Зр╣Бр╕ер╣Йр╕з! ЁЯЪи"
        elif diff <= 1.0:    status = "тЭЧ р╣Гр╕Бр╕ер╣Йр╕Хр╕ер╕┤р╣Ир╕З тЭЧ"
        elif diff <= 2.0:    status = "тЪая╕П р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ"
    except:
        status = "тЭМ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│р╕Ьр╕┤р╕Фр╕гр╕╣р╕Ы"
    msg = (
        f"ЁЯУв р╕Щр╣Йр╕│ р╕У {now} (GMT+7)\n"
        f"- р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡: р╕Щр╣Йр╕│ {current_level} р╕б. / р╕Хр╕ер╕┤р╣Ир╕З {bank_level} р╕б.\n"
        f"- р╕кр╕Цр╕▓р╕Щр╕░: {status}\n"
        f"- р╣Ар╕Вр╕╖р╣Ир╕нр╕Щр╣Ар╕Ир╣Йр╕▓р╕Юр╕гр╕░р╕вр╕▓: {discharge} р╕ер╕Ъ.р╕б./р╕зр╕┤р╕Щр╕▓р╕Чр╕╡\n"
        f"- р╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕З: 2567={hist_2024}, 2554={hist_2011}"
    )
    return msg

# --- р╕кр╣Ир╕З LINE ---
def send_line_broadcast(message):
    if not LINE_TOKEN:
        print("тЭМ р╣Др╕бр╣Ир╕бр╕╡ LINE_CHANNEL_ACCESS_TOKEN")
        return
    headers = {"Authorization": f"Bearer {LINE_TOKEN}"}
    payload = {"messages": [{"type":"text","text":message}]}
    try:
        r = requests.post(LINE_API_URL, headers=headers, json=payload, timeout=10)
        r.raise_for_status()
        print("тЬЕ Sent LINE broadcast")
    except Exception as e:
        print(f"тЭМ [send_line] Error: {e}")

# --- Main ---
if __name__ == "__main__":
    print("=== р╣Ар╕гр╕┤р╣Ир╕бр╕гр╕░р╕Ър╕Ър╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Щр╣Йр╕│р╕нр╕┤р╕Щр╕Чр╕гр╣Мр╕Ър╕╕р╕гр╕╡ ===")
    lvl, bank = get_inburi_data(SINGBURI_URL)
    dis  = fetch_chao_phraya_dam_discharge(DISCHARGE_URL)
    df_hist = load_historical_data(HISTORICAL_DATA_FILE)

    today = datetime.now(pytz.timezone('Asia/Bangkok'))
    h_2024 = find_historical_discharge(df_hist, today.replace(year=2024))
    h_2011 = find_historical_discharge(df_hist, today.replace(year=2011))

    if lvl and bank and dis:
        message = analyze_and_create_message(lvl, dis, bank, h_2024, h_2011)
        print(message)
        send_line_broadcast(message)
    else:
        print("тЭМ р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕бр╣Ир╕Др╕гр╕Ъ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Др╕Фр╣Й")
